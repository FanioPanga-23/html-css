				FORMULÁRIOS

1- Para remover a configuração automática de autocompletamento no formulário, mas não é obrigatório desativar está propriedade, pode ser quando ela estiver encomodando:

	<form autocomplete="off">
	</form>

2- As propriedades dos inputs (name e id): 
	name="" é mais útil para o HTML e PHP
	id="" é mais útil para JS e uso de labels

3- O uso de label é bastante importante e para criar ligação entre o input e o seu campo ou título que lhe antecede, relacionamos o "label" com o (id do input):

    <form action="cadastro.php" autocomplete="off">
        <p>
            <label for="inome">Nome:</label> 
            <input type="text" name="nome" id="inome">
        </p>
        <p>
            <label for="isobrenome">Sobrenome:</label> 
	    <input type="text" name="sobrenome" id="isobrenome">
        </p>
    </form>

4- Métodos (method), GET e POST no HTML:

	GET: é útil para dados simples e não sensíveis e ele permite o envio de até 3mil bits (3 mil letras), ou seja, o formulário todo terá de ter apenas 3mil letras

	POST: é útil para envio de dados sensíveis, como senhas, cartções de crédito, imagens e por aí, e tmbm é bem útil para que os dados não apareçam na URL.

	Para melhorar a segurança dos dados tenho de estudar HTTPS.

5- Para evitar o envio de formulário vazio e com campos preenchidos fora das regras do site ou sistema, devemos usar algumas propriedades parecidas com constrantes em BD dentro dos "inputs". Propriedades como:

	requerid (dentro do input): exigirá o preenchimento do campo em questão.

	minlength (dentro do input): usado frequentemente em campos de senhas e outros, para exigir um número mínimo de caracteres para o campo em questão.

	maxlength (dentro do input): faz o oposto do minlength.

6- Dicas extras para formulários:

	size="10" (dentro do input): estou configurando o campo em questão com umtamanho de apenas 10 caracteres, mas se o tamanho máximo (maxlength) estiver definido acima de 10 caracteres, será permitido entrar com mais de 10 caracteres, mas num campo pequeno com tamanho de apenas 10 caracteres apresentados.

	placeholder="Nome de usuário": estou dando dica do tipo de dado que é usado para preencher o campo em questão

	autocomplete="": é bem recomendado o seu uso dentro dos inputs para o navegador ter noção do tipo do tipo de campo que será autocompletado e conseguir relacionar bem os dados no momento da autocompletação.
	
	min="": geralmente usado nas campos numéricos, serve para definir o número mínimo que pode ser aceite num campo numérico.
	
	max="": é o oposto do min.
	
	step="" (do English 'passo'): serve para definir se os números pulam de quantas em quantas casas. Com eles podemos permitir o uso de números decimais nos campos numéricos.
	
	value="": serve para iniciar o campo em questão com um valor sugerido.
	
	
								CHEKBOX e RADIO BUTTON
								
	Para os radio, dentro do "input" temos de usar o mesmo texto para todos outros inputs do tipo para permitir checkar ou marcar apenas 1.
		e também temos de usar o atributo value (e o valor que for definido dentro do 'value' é que será guardado no formulário quando um dos 'radios' for marcado).
		podemos também usar a propriedade 'checked' para iniciar com 1 dos 'radios' já selecionados (também podemos usar isso nos inputs do tipo "checkbox" apenas a propriedade checked).
	
	Exemplo do Radio button:
	
			<form>
			  <input type="radio" id="html" name="fav_language" value="HTML">
			  <label for="html">HTML</label><br>
			  <input type="radio" id="css" name="fav_language" value="CSS">
			  <label for="css">CSS</label><br>
			  <input type="radio" id="javascript" name="fav_language" value="JavaScript">
			  <label for="javascript">JavaScript</label>
			</form> 	
	
Checkbox, usados geralmente para seleção de várias opções, após configurar o 'input', é necessário relacionar o mesmo com um label.

	Exemplo de Checkbox:
	
		 <form>
		  <input type="checkbox" id="vehicle1" name="vehicle1" value="Bike">
		  <label for="vehicle1"> I have a bike</label><br>
		  <input type="checkbox" id="vehicle2" name="vehicle2" value="Car">
		  <label for="vehicle2"> I have a car</label><br>
		  <input type="checkbox" id="vehicle3" name="vehicle3" value="Boat">
		  <label for="vehicle3"> I have a boat</label>
		</form> 
	
	
							RANGE e FILE
							
		exemplos: 
			<form action="cadastro.php" method="post">
        			<p>
				    <label for="cor" value="#12ff00">Cor</label>
				    <input type="color" name="cor" id="cor">
				</p>
				<p>
				    <label for="satisf">Nível de satisfação</label>
				    <input type="range" name="satisf" id="satisf" min="1" max="10" value="3">
				</p>
				<p>
				    <label for="foto">Foto de perfil</label>
				    <input type="file" name="foto" id="foto">
				</p>
				<p>
				    <input type="submit" value="Enviar">
				    <input type="reset" value="Limpar">
				</p>
		     </form>
	
	
							SELECT, DATEILIST e TEXTAREA 
							
	
	SELECT:
	
	Permitir várias seleções: Use o Atributo multiple (multiple="3 ou mais") para permitir que o usuário selecione mais de um valor: para fazer as várias seleções é só manter CTRL e selecionar
	
	Valores visíveis: Use o atributo size="1,2,3 ou mais" para especificar o número de valores visíveis
	
	 <label for="provs">Províncias</label> /*serve para criar ligação com a lista de opções*/
            <select name="provs" id="provs">
                
                <option value="" selected>---Escolha---</option> /*foi usado como um placeholder, a propriedade value está vazia para não enviar nada, isso serve apenas como um placeholder*/
                
                <optgroup label="Províncias consteiras"> /*optgroup: serve para selecionar tipos de opções da mesma espécie*/
                    
                    <option value="LA">Luanda</option> /*option, serve para inserir as opções que falarão parte do select, podemos tmbm usar a propriedade 'selected' dentro de uma das opções para a mesma opção aparecer pré-selecionada*/
                    
                    <option value="BL">Benguela</option>
                    <option value="NB">Namibe</option>
                    <option value="BN">Bengo</option>
                    <option value="ZR">Zaire</option>
                </optgroup>

                <optgroup label="Províncias sulistas">
                    <option value="CU">Cunene</option>
                    <option value="CB">Cuando Cubango</option>
                    <option value="HL">Huíla</option>
                    <option value="BI">Bié</option>
                    <option value="HM">Huambo</option>
                </optgroup>
            </select>
            
            
         DATALIST:
         
         elemento <datalist> especifica uma lista de opções predefinidas para um <input>Elemento.
         Os usuários verão uma lista suspensa das opções predefinidas à medida que inserem dados.

	 O Atributo <input>, deve referir-se ao atributo id do Elemento <datalist>.
	 
	 EXEMPLO:
	 
		<form action="/action_page.php">
		  <input list="browsers">
		  <datalist id="browsers">
		    <option value="Edge">
		    <option value="Firefox">
		    <option value="Chrome">
		    <option value="Opera">
		    <option value="Safari">
		  </datalist>
		</form> 	 	
         
         
         	<label for="ixx">nome do campo</label>
         	<input name="xx" id="ixx" list="lt">  /*usei a propriedade (list="") para criar ligação entre o 'input:text' com a 'datalist', é atribuido um id na datalist e o mesmo id é vinculado com na proriedade list do input*/
         	<datalist id="lt">
         		<option value="dado que será salvo e enviado após a seleção da opção">nome da opção</option>
         	</datalist>
         	
         	/*dentro do "datalist" também podemos usar o optgroup (grupo de opções). Mas nem todos navegadores estão compatíveis ainda*/
         	
         	
         TEXTAREA:
         	<label for="msg">Mensagem</label> <br>
            <textarea name="mensagem" id="msg" cols="30" rows="10" placeholder="Deixe aqui a sua mensagem"></textarea>
            /*Nas propriedades (row e col), não há limites, eles são infinitos*/
            
            
            
					O atributo name="" para input

Observe que cada campo de entrada deve ter um nameAtributo a ser enviado.

Se o atributo name="" é omitido, o valor do campo de entrada não será enviado.
	
	Exemplo

	Este exemplo não irá enviar o valor do campo de entrada "Primeiro nome":
		<form action="/action_page.php">
		  <label for="fname">First name:</label><br>
		  <input type="text" id="fname" value="John"><br><br>
		  <input type="submit" value="Submit">
		</form> 
	
	
	
				Fieldset e Legend
		
Elemento <fieldset> é usado para agrupar dados relacionados em um formulário.

O que é <legend>Elemento define uma legenda para o <fieldset>Elemento.
	
	<form action="/action_page.php">
	  <fieldset>
	    <legend>Personalia:</legend>
	    <label for="fname">First name:</label><br>
	    <input type="text" id="fname" name="fname" value="John"><br>
	    <label for="lname">Last name:</label><br>
	    <input type="text" id="lname" name="lname" value="Doe"><br><br>
	    <input type="submit" value="Submit">
	  </fieldset>
	</form>
		
					
						
						Atributos para a tag form
						
.Action = aqui vai o arquivo php, manipulador de formulário
.target = _black, _self, _parent, _top, framename
.method = get e post
.autocomplete = on ou of
.novalidate = é um atributo booleano. Quando presente, especifica que os dados de formulário (input) não devem ser validados quando enviados.


			List of All <form> Attributes

Attribute 	Description

accept-charset 	Specifies the character encodings used for form submission
action 		Specifies where to send the form-data when a form is submitted
autocomplete 	Specifies whether a form should have autocomplete on or off
enctype 	Specifies how the form-data should be encoded when submitting it to the server (only for method="post")
method 		Specifies the HTTP method to use when sending form-data
name 		Specifies the name of the form
novalidate 	Specifies that the form should not be validated when submitted
rel 		Specifies the relationship between a linked resource and the current document
target 		Specifies where to display the response that is received after submitting the form



O elemento <button>

O elemento <button> define um botão clicável:

Exemplo:

	<button type="button" onclick="alert('Hello World!')">Click Me!</button>

Nota: Sempre especifique o typeatributo para o elemento do botão. Diferentes navegadores podem usar diferentes tipos padrão para o elemento do botão.



						Input Type Search

The <input type="search"> is used for search fields (a search field behaves like a regular text field).

	Example

		<form>
		  <label for="gsearch">Search Google:</label>
		  <input type="search" id="gsearch" name="gsearch">
		</form> 
		
		
		
		
		
					Tipo de entrada Url
	
O que é <input type="url">é usado para campos de entrada que devem conter um endereço URL.

Dependendo do suporte do navegador, o campo url pode ser validado automaticamente Quando submetido.

Alguns smartphones reconhecem o tipo url e adiciona ".com" ao teclado para combinar Url de entrada.

	Exemplo

		<form>
		  <label for="homepage">Add your homepage:</label>
		  <input type="url" id="homepage" name="homepage">
		</form> 
		
		
		
						Alguns atributos para os inputs
						
		disabled (serve para deixar um input apenas visível, mas inoperável);
		readonly (serve para deixar um input até clicável, mas somente para leitura);
		autofoco (especifica que um campo de entrada deve automaticamente obter foco quando a página é carregada.)
		

						Atributos do <form>
						
The form Attribute:

The input form attribute specifies the form the <input> element belongs to.

The value of this attribute must be equal to the id attribute of the <form> element it belongs to.

Example:

	An input field located outside of the HTML form (but still a part of the form):
		
		<form action="/action_page.php" id="form1">
		  <label for="fname">First name:</label>
		  <input type="text" id="fname" name="fname"><br><br>
		  <input type="submit" value="Submit">
		</form>

		<label for="lname">Last name:</label>
		<input type="text" id="lname" name="lname" form="form1">
		
		
						The formaction Attribute

The input formaction attribute specifies the URL of the file that will process the input when the form is submitted.

Note: This attribute overrides(substitui) the action attribute of the <form> element.

The formaction attribute works with the following input types: submit and image.
Example

An HTML form with two submit buttons, with different actions:
		
		<form action="/action_page.php">
		  <label for="fname">First name:</label>
		  <input type="text" id="fname" name="fname"><br><br>
		  <label for="lname">Last name:</label>
		  <input type="text" id="lname" name="lname"><br><br>
		  <input type="submit" value="Submit">
		  <input type="submit" formaction="/action_page2.php" value="Submit as Admin">
		</form> 
	2 Botões de submissão, o primeiro é para o action_page.php e o outro é para o action_page2.php, dentro do atributo em questão "formaction"
	
	

						O atributo formenctype

O atributo "formenctype" especifica como os dados de formulário devem ser codificados quando enviados (apenas para formulários com método"post").

Nota: Este atributo substitui o atributo enctype(tipo de codificação) do Elemento <form>.

O atributo formenctype funciona com os seguintes tipos de entrada: enviar e visualizar.

Exemplo:

Um formulário com dois botões de envio. O primeiro envia os dados de formulário com codificação padrão, O segundo envia os dados do formulário codificados como "multipart/form-data":
		
		<form action="/action_page_binary.asp" method="post">
		  <label for="fname">First name:</label>
		  <input type="text" id="fname" name="fname"><br><br>
		  <input type="submit" value="Submit">
		  <input type="submit" formenctype="multipart/form-data"
		  value="Submit as Multipart/form-data">
		</form> 
		
		
						The novalidate Attribute

The novalidate attribute is a <form> attribute.

When present, novalidate specifies that all of the form-data should not be validated when submitted.
Example

Specify that no form-data should be validated on submit:
		
		<form action="/action_page.php" novalidate>
		  <label for="email">Enter your email:</label>
		  <input type="email" id="email" name="email"><br><br>
		  <input type="submit" value="Submit">
		</form> 
		
		
						O atributo formnovalidate

A entrada formnovalidateO atributo especifica que um elemento “input’ não deve ser validado quando submetido.

Nota: Este atributo substitui o atributo novalidate do <form>Elemento.

O que é formnovalidateO atributo funciona com o Os seguintes tipos de entrada: submeter.
Exemplo

Um formulário com dois botões de envio (com e sem validação):
		
		<form action="/action_page.php">
		  <label for="email">Enter your email:</label>
		  <input type="email" id="email" name="email"><br><br>
		  <input type="submit" value="Submit">
		  <input type="submit" formnovalidate="formnovalidate"
		  value="Submit without validation">
		</form> 
		
		
						O atributo formtarget

A entrada formtargetO atributo especifica um nome ou uma palavra-chave que indica onde para exibir a resposta recebida após o envio do formulário.

Nota: Este atributo substitui o atributo de destino do <form>Elemento.

O que é formtargetO atributo funciona com o Os seguintes tipos de entrada: enviar e visualizar.
Exemplo

Um formulário com dois botões de envio, com diferentes janelas de destino:
		
		<form action="/action_page.php">
		  <label for="fname">First name:</label>
		  <input type="text" id="fname" name="fname"><br><br>
		  <label for="lname">Last name:</label>
		  <input type="text" id="lname" name="lname"><br><br>
		  <input type="submit" value="Submit">
		  <input type="submit" formtarget="_blank" value="Submit to a new window/tab">
		</form> 
		
		
						O atributo do método de formmethod

A entrada formmethodO atributo define o método HTTP para enviar dados de formulário para o URL de ação.

Nota: Este atributo substitui o atributo method do <form>Elemento.

O que é formmethodO atributo funciona com o Os seguintes tipos de entrada: enviar e visualizar.

Os dados de formulário podem ser enviados como variáveis de URL (method"get") ou como um post HTTP transação (method-"post").

Notas sobre o método "get":

    Este método anexa os dados de formulário à URL em pares de nome/valor
    Este método é útil para envios de formulários onde um usuário deseja marcar O resultado
    Há um limite para a quantidade de dados que você pode colocar em um URL (varias entre Navegador), portanto, você não pode ter certeza de que todos os dados de formulário serão Correta corretamente transferida
    Nunca use o método "get" para passar informações sensíveis! (senha ou Outras informações sensíveis serão visíveis na barra de endereços do navegador)

Notas sobre o método "pós":

    Este método envia os dados de formulário como uma transação de post HTTP
    As submissões de formulário com o método "post" não podem ser marcadas
    O método "pós" é mais robusto e seguro do que "get", e "post" faz não têm limitações de tamanho

Exemplo

Um formulário com dois botões de envio. O primeiro envia os dados de formulário com método"get". O segundo envia os dados de formulário com o método""post":
		<form action="/action_page.php" method="get">
		  <label for="fname">First name:</label>
		  <input type="text" id="fname" name="fname"><br><br>
		  <label for="lname">Last name:</label>
		  <input type="text" id="lname" name="lname"><br><br>
		  <input type="submit" value="Submit using GET">
		  <input type="submit" formmethod="post" value="Submit using POST">
		</form> 
